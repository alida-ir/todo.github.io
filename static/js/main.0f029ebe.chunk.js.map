{"version":3,"sources":["components/Header.js","components/Application.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Header","Navbar","bg","variant","Container","Brand","href","Nav","className","Link","Text","Dropdown","Toggle","id","Menu","Item","Divider","Application","useState","localStorage","getItem","JSON","parse","list","setList","text","setText","useEffect","setItem","stringify","btnClick","e","preventDefault","prev","length","name","checked","Todo","map","item","key","ListGroup","as","Badge","onClick","itemId","newList","filter","badgeClick","Fragment","Col","md","onSubmit","InputGroup","size","Button","FormControl","onChange","target","value","textChange","aria-label","aria-describedby","xs","Alert","React","classList","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ThemeProvider","dir","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"qNAKMA,EAAS,WACX,OACY,cAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAA1B,SACI,eAACC,EAAA,EAAD,WACA,cAACH,EAAA,EAAOI,MAAR,CAAcC,KAAK,wBAAnB,uBACA,eAACC,EAAA,EAAD,CAAKC,UAAU,oBAAf,UACA,cAACD,EAAA,EAAIE,KAAL,CAAUH,KAAK,mBAAf,mBACA,cAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,6CAAf,0BACA,cAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,8BAAf,oBACA,cAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,iCAAf,uBACA,cAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,wBAAf,sBACA,eAACL,EAAA,EAAOS,KAAR,WACI,cAAC,SAAD,UAAQ,sBAAOF,UAAU,eAAjB,sBACR,cAAC,UAAD,UAAS,sBAAOA,UAAU,cAAjB,8BAGb,eAACG,EAAA,EAAD,CAAUH,UAAU,aAApB,UACA,cAACG,EAAA,EAASC,OAAV,CAAiBC,GAAG,gCAAgCV,QAAQ,YAA5D,kBAIA,eAACQ,EAAA,EAASG,KAAV,CAAeX,QAAQ,OAAOK,UAAU,qBAAxC,UACA,cAACG,EAAA,EAASI,KAAV,CAAeT,KAAK,mBAApB,mBAGA,cAACK,EAAA,EAASI,KAAV,CAAeT,KAAK,6CAApB,0BACA,cAACK,EAAA,EAASI,KAAV,CAAeT,KAAK,8BAApB,oBACA,cAACK,EAAA,EAASI,KAAV,CAAeT,KAAK,iCAApB,uBACA,cAACK,EAAA,EAASI,KAAV,CAAeT,KAAK,wBAApB,sBACA,cAACK,EAAA,EAASK,QAAV,IACA,eAACL,EAAA,EAASI,KAAV,WACQ,cAAC,SAAD,UAAQ,sBAAOP,UAAU,eAAjB,sBACR,cAAC,UAAD,UAAS,sBAAOA,UAAU,cAAjB,uC,wEChC/BS,EAAc,WAAO,IAAD,EACGC,mBACbC,aAAaC,QAAQ,QAAUC,KAAKC,MAAMH,aAAaC,QAAQ,SAAW,IAFhE,mBACfG,EADe,KACRC,EADQ,OAIGN,mBAAS,IAJZ,mBAIfO,EAJe,KAIRC,EAJQ,KAMtBC,qBAAU,WACPR,aAAaS,QAAQ,OAASP,KAAKQ,UAAUN,MAC7C,CAACA,IAEJ,IAIMO,EAAW,SAACC,GACdA,EAAEC,iBACU,KAATP,IACHD,GAAQ,SAAAS,GAAI,4BAAQA,GAAR,CAAe,CACvBpB,GAAIU,EAAKW,OACTC,KAAMV,EACNW,SAAQ,QAEZV,EAAQ,MAoBNW,EAAOd,EAAKe,KAAI,SAACC,EAAQC,GACP,OAAO,eAACC,EAAA,EAAU1B,KAAX,CAAgBP,UAAY+B,EAAKH,QAAU,wCAA0C,iCAAmCM,GAAG,KAA3H,UACkBH,EAAKJ,KACN,gCACI,cAACQ,EAAA,EAAD,CAAOC,QAAS,kBAhB1CC,EAgBiEN,EAAK1B,QAf5FW,EACID,EAAKe,KAAI,SAACC,EAAOC,GAKb,OAJDD,EAAK1B,KAAOgC,IAEXN,EAAKH,SAAWG,EAAKH,SAEdG,MAPM,IAACM,GAgB4E3C,GAAG,UAArD,mDACA,cAACyC,EAAA,EAAD,CAAOC,QAAS,kBAtBjD,SAACC,GAChB,IAAMC,EAAUvB,EAAKwB,QAAO,SAAAR,GAAS,OAAOA,EAAK1B,KAAOgC,KACxDrB,EAAQsB,GAoB8DE,CAAWT,EAAK1B,KAAMX,GAAG,SAA/C,qCAJgHsC,MASpK,OACI,eAAC,IAAMS,SAAP,WACI,eAAC7C,EAAA,EAAD,CAAWI,UAAU,oEAArB,UACI,cAAC0C,EAAA,EAAD,CAAKC,GAAI,GAAT,SACQ,sBAAMC,SAAU,SAACrB,GAAD,OAAOD,EAASC,IAAhC,SACI,eAACsB,EAAA,EAAD,CAAYC,KAAK,KAAjB,UACQ,cAACC,EAAA,EAAD,CAAQX,QAAS,SAACb,GAAD,OAAOD,EAASC,IAAI5B,QAAQ,UAA7C,yDACA,cAACqD,EAAA,EAAD,CAAaC,SAAU,SAAA1B,GAAC,OAjDrC,SAAAA,GACfL,EAAQK,EAAE2B,OAAOC,OAgDuCC,CAAW7B,IAAI4B,MAAOlC,EAAMoC,aAAW,QAAQC,mBAAiB,gCAIhH,cAACZ,EAAA,EAAD,CAAKC,GAAI,EAAGY,GAAI,GAAIvD,UAAU,OAA9B,SACI,cAACiC,EAAA,EAAD,CAAWC,GAAG,KAAKlC,UAAU,YAA7B,SACKe,EAAKW,OACFG,EAEA,cAAC2B,EAAA,EAAD,CAAO7D,QAAQ,UAAf,mJAKf8D,IAAMC,cCjEJC,MATf,WACE,OACE,qCACI,cAAC,EAAD,IACA,cAAC,EAAD,QCIFC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,+GAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MC9FjE,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,eCEdO,IAASC,OACP,cAAC,IAAMtD,SAAP,UACA,cAACuD,EAAA,EAAD,CAAeC,IAAI,MAAnB,SACE,cAAC,EAAD,QAGFC,SAASC,eAAe,SFKnB,SAAkB/B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI+B,IAAIC,GAAwBvC,OAAOC,SAASjE,MACpDwG,SAAWxC,OAAOC,SAASuC,OAIvC,OAGFxC,OAAOyC,iBAAiB,QAAQ,WAC9B,IAAMpC,EAAK,UAAMkC,GAAN,sBAEPzC,IAgEV,SAAiCO,EAAOC,GAEtCoC,MAAMrC,EAAO,CACXsC,QAAS,CAAE,iBAAkB,YAE5BjC,MAAK,SAACkC,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CzC,UAAUC,cAAcyC,MAAMvC,MAAK,SAACC,GAClCA,EAAauC,aAAaxC,MAAK,WAC7BV,OAAOC,SAASkD,eAKpB/C,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IAAI,oEAtFViC,CAAwB/C,EAAOC,GAI/BC,UAAUC,cAAcyC,MAAMvC,MAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,OE3B/B+C,GAKA7B,M","file":"static/js/main.0f029ebe.chunk.js","sourcesContent":["import React from 'react'\nimport { Container, Dropdown, Nav, Navbar } from 'react-bootstrap'\nimport { Offline, Online } from 'react-detect-offline'\n\n\nconst Header = () => {\n    return (\n                <Navbar bg=\"dark\" variant=\"dark\">\n                    <Container>\n                    <Navbar.Brand href=\"http://todo.alida.ir/\">Todo List</Navbar.Brand>\n                    <Nav className=\"mr-auto d-xs-none\" >\n                    <Nav.Link href=\"https://alida.ir\">AliDa</Nav.Link>\n                    <Nav.Link href=\"https://github.com/alida-ir/todo.github.io\">Repositories</Nav.Link>\n                    <Nav.Link href=\"https://github.com/alida-ir\">Github</Nav.Link>\n                    <Nav.Link href=\"https://instagram.com/alida_ir\">Instagram</Nav.Link>\n                    <Nav.Link href=\"https://t.me/alida_ir\">Telegram</Nav.Link>\n                    <Navbar.Text>\n                        <Online><span  className='text-success'>Online</span></Online>\n                        <Offline><span  className='text-danger'>Offlined</span></Offline>\n                    </Navbar.Text>\n                    </Nav>\n                    <Dropdown className='d-sm-none '>\n                    <Dropdown.Toggle id=\"dropdown-button-dark-example1\" variant=\"secondary\">\n                        Menu\n                    </Dropdown.Toggle>\n\n                    <Dropdown.Menu variant=\"dark\" className='dropdown-menu-dark'>\n                    <Dropdown.Item href=\"https://alida.ir\">\n                        AliDa\n                    </Dropdown.Item>\n                    <Dropdown.Item href=\"https://github.com/alida-ir/todo.github.io\">Repositories</Dropdown.Item>\n                    <Dropdown.Item href=\"https://github.com/alida-ir\">Github</Dropdown.Item>\n                    <Dropdown.Item href=\"https://instagram.com/alida_ir\">Instagram</Dropdown.Item>\n                    <Dropdown.Item href=\"https://t.me/alida_ir\">Telegram</Dropdown.Item>\n                    <Dropdown.Divider />\n                    <Dropdown.Item >\n                            <Online><span  className='text-success'>Online</span></Online>\n                            <Offline><span  className='text-danger'>Offlined</span></Offline>\n                    </Dropdown.Item>\n                    </Dropdown.Menu>\n                </Dropdown>\n                    </Container>\n                </Navbar>\n    )\n}\n\nexport {Header}\n","import React , {useState , useEffect} from 'react'\nimport { Alert, Badge, Button, Col, Container, FormControl, InputGroup, ListGroup } from 'react-bootstrap'\n\n\n\nconst Application = () => {\n    const [list , setList] = useState(\n                localStorage.getItem('list') ? JSON.parse(localStorage.getItem('list')) : []\n    )\n    const [text , setText] = useState('' )\n\n    useEffect(() => {\n       localStorage.setItem('list' , JSON.stringify(list))\n    }, [list])\n\n    const textChange = e => {\n        setText(e.target.value)\n    }\n\n    const btnClick = (e) => {\n        e.preventDefault()\n        if(text === '') return;\n        setList(prev => [...prev , {\n            id: list.length ,\n            name: text,\n            checked:false\n        }])\n        setText('')\n    }\n\n    const badgeClick = (itemId) =>{\n        const newList = list.filter(item => {return item.id !== itemId})\n        setList(newList)\n    }\n  \n    const badgeChangeClick = (itemId) => {\n        setList(\n            list.map((item , key) => {\n            if(item.id === itemId)\n            {    \n                item.checked = !item.checked;\n            }   \n                return item;    \n              } )\n        )\n    }\n\n    const Todo = list.map((item  , key)=> { \n                            return <ListGroup.Item className={ item.checked ? 'd-flex justify-content-between active' : 'd-flex justify-content-between' } as=\"li\" key={key}  >\n                                                    {item.name}\n                                                    <div>\n                                                        <Badge onClick={() => badgeChangeClick(item.id)}  bg='success'>تیک زدن</Badge>\n                                                        <Badge onClick={() => badgeClick(item.id)}  bg='danger'>حذف</Badge>\n                                                    </div>\n                                                </ListGroup.Item>\n                                    })\n\n    return (\n        <React.Fragment>\n            <Container className='mt-5 d-flex justify-content-center flex-column align-items-center'>\n                <Col md={10}>\n                        <form onSubmit={(e) => btnClick(e)}>\n                            <InputGroup size=\"lg\">\n                                    <Button onClick={(e) => btnClick(e)} variant='primary' >اضافه کن</Button>\n                                    <FormControl onChange={e => textChange(e)} value={text} aria-label=\"Large\" aria-describedby=\"inputGroup-sizing-sm\" />\n                            </InputGroup>\n                        </form>\n                </Col>\n                <Col md={9} xs={12} className='mt-5'>\n                    <ListGroup as=\"ul\" className='rounded-0'>\n                        {list.length ? \n                            Todo\n                        : \n                            <Alert variant=\"success\">هیچ کاری برای انجام نیست !</Alert>\n                        }\n                    </ListGroup>\n                </Col>\n            </Container>\n            {React.classList}\n        </React.Fragment>\n    )\n}\n\nexport {Application}","import React from 'react';\nimport { Header , Application } from './components';\n\n\nfunction App() {\n  return (\n    <>\n        <Header />\n        <Application />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport 'vazir-font/dist/Farsi-Digits/font-face-FD.css';\nimport { ThemeProvider } from 'react-bootstrap';\n\nReactDOM.render(\n  <React.Fragment>\n  <ThemeProvider dir=\"rtl\">\n    <App />\n  </ThemeProvider>\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}